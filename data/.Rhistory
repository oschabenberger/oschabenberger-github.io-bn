main="Histogram & Density of 10,000 Poisson(20) and Normal(20,20) draws",cex.main=0.8 )
lines(density(norm, bw=nrd0))
set.seed(4532)
norm <- rnorm(10000,mean=20,sd=sqrt(20))-0.5
poi <- rpois(10000,20)
hist(poi,breaks=40,freq=FALSE, xlab="",
xlim=c(0,40),
main="Histogram & Density of 10,000 Poisson(20) and Normal(20,20) draws",cex.main=0.8 )
lines(density(norm, bw=nrd0))
set.seed(4532)
norm <- rnorm(10000,mean=20,sd=sqrt(20))-0.5
poi <- rpois(10000,20)
hist(poi,breaks=40,freq=FALSE, xlab="",
xlim=c(0,40),
main="Histogram & Density of 10,000 Poisson(20) and Normal(20,20) draws",cex.main=0.8 )
lines(density(norm, bw="nrd0"))
#| fig.cap: Densities of Gamma(3,1/2) (solid), Gamma(2,2) (dashed) and Gamma(1,1/2) random variables. The Gamma(2,2) is also a $\chi_{4}^{2}$ distribution. The Gamma(1,1/2) is a Expo(2) distribution.
#| label: fig-gamma-densities
x <- seq(0,7,0.05)
f <- dgamma(x,shape=3,scale=0.5) # scale parameter is beta in my parameterization
f2 <- dgamma(x,shape=2,scale=2)
f3 <- dgamma(x,shape=1,scale=0.5)
plot(x,f,type="l",lwd=1.5,ylab="Density f(y)",xlab="y",ylim=c(0,0.6))
lines(x,f2,lwd=1.5,lty="dashed")
lines(x,f3,lwd=1.5,lty="dotted")
legend("topright",
lwd=1.5,
legend=c("Gamma(3,0.5)","Gamma(2,2)","Gamma(1,0.5)"),
lty=c("solid","dashed","dotted"))
#| fig.cap: Densities of Gamma(3,1/2) (solid), Gamma(2,2) (dashed) and Gamma(1,1/2) random variables. The Gamma(2,2) is also a $\chi_{4}^{2}$ distribution. The Gamma(1,1/2) is a Expo(2) distribution.
#| label: fig-gamma-densities
x <- seq(0,7,0.05)
f <- dgamma(x,shape=3,scale=0.5) # scale parameter is beta in my parameterization
f2 <- dgamma(x,shape=2,scale=2)
f3 <- dgamma(x,shape=1,scale=0.5)
par(mai=c(1,1,0.5,0.5))
plot(x,f,type="l",lwd=1.5,ylab="Density f(y)",xlab="y",ylim=c(0,0.6))
lines(x,f2,lwd=1.5,lty="dashed")
lines(x,f3,lwd=1.5,lty="dotted")
legend("topright",
lwd=1.5,
legend=c("Gamma(3,0.5)","Gamma(2,2)","Gamma(1,0.5)"),
lty=c("solid","dashed","dotted"))
?dbeta
x <- seq(0,10,0.1)
x2 <- seq(5,11,0.1)
y <- dnorm(x,mean=4,sd=1)
y2 <- dnorm(x,mean=5,sd=2)
y3 <- dnorm(x2,mean=8,sd=0.75)
plot(x,y,type="l",lwd=1.5,ylab="Density f(y)",xlab="y",ylim=c(0,0.55))
lines(x,y2,lwd=1.5,lty="dashed")
lines(x2,y3,lwd=1.5,lty="dotted")
#| fig.cap: Gaussian distributions: $G(4,1)$ (solid), $G(5,4)$ (dashed), and $G(8, {0.75}^{2})$ (dotted).
x <- seq(0,10,0.1)
x2 <- seq(5,11,0.1)
y <- dnorm(x,mean=4,sd=1)
y2 <- dnorm(x,mean=5,sd=2)
y3 <- dnorm(x2,mean=8,sd=0.75)
par(mai=c(1,1,0.5,0.5))
plot(x,y,type="l",lwd=1.5,ylab="Density f(y)",xlab="y",ylim=c(0,0.55))
lines(x,y2,lwd=1.5,lty="dashed")
lines(x2,y3,lwd=1.5,lty="dotted")
20 * 36
20 * 26 + 80
300/8
300/8 * 20
options(width=80)
library(ISLR2)
library(dplyr)
library(knitr)
library(glmnet)
library(keras)
reticulate::use_condaenv(condaenv = "r-tensorflow")
knitr::opts_chunk$set(echo=TRUE, warning=F, message=F, fig.asp=0.7, cache=FALSE)
knit_hooks$set(no.main = function(before, options, envir) {
if (before) par(mar = c(4.1, 4.1, 1.1, 1.1))  # smaller margin on top
})
dat <- data.frame(x1=c(0,0,1,1), x2=c(0,1,0,1), y=c(0,1,1,0))
dat
reg_1 <- lm(y ~ x1 + x2 , data=dat)
summary(reg_1)
reg_ia <- lm(y ~ x1 + x2 + x1*x2 -1, data=dat)
summary(reg_ia)
predict(reg_ia)
round(predict(reg_ia),4)
summary(reg_ia)
mnist <- dataset_mnist()
mnist <- dataset_mnist()
x_train <- mnist$train$x
g_train <- mnist$train$y
x_test <- mnist$test$x
g_test <- mnist$test$y
dim(x_train)
dim(x_test)
x_train <- array_reshape(x_train, c(nrow(x_train), 784))
x_test  <- array_reshape(x_test, c(nrow(x_test), 784))
y_train <- to_categorical(g_train, 10)
y_test  <- to_categorical(g_test, 10)
y_test{1:10}
y_test[1:10]
y_test[1:20,1:10]
g_test[1:20]
y_test[1:20,1:10]
x_test[3,]
g_test[3,]
y_test[3]
g_test[3]
x_test[3,]
x_train <- x_train / 255
x_test  <- x_test / 255
modelnn <- keras_model_sequential() %>%
layer_dense(units=128,                    # First hidden layer
activation="relu",
input_shape=784) %>%
layer_dropout(rate=0.3) %>%               # First dropout layer
layer_dense(units=64,                     # Second hidden layer
activation="tanh") %>%
layer_dropout(rate=0.2) %>%               # Second dropout layer
layer_dense(units=10,                     # Output layer
activation="softmax")
summary(modelnn)
(748 +1)*128
(784 +1)*128
(128 + 1)*64
(64+1)*10
modelnn %>% compile(loss="categorical_crossentropy",
optimizer=optimizer_rmsprop(),
metrics=c("accuracy")
)
60000/128
history <- modelnn %>%
fit(x_train,
y_train,
epochs=20,
batch_size=128,
validation_data= list(x_test, y_test),
)
.9785*10000
10000-.9785*10000
plot(history, smooth = FALSE)
plot(history, smooth = TRUE)
plot(history, smooth = FALSE)
history <- modelnn %>%
fit(x_train,
y_train,
epochs=10,
batch_size=128,
validation_data= list(x_test, y_test),
)
predcl <- modelnn %>% predict(x_test) %>% k_argmax()
as.numeric(predcl[1:10])
predcl <- modelnn %>% predict(x_test)
as.numeric(predcl[1:10,])
round(as.numeric(predcl[1:10,]),5)
as.numeric(predcl[1:36])
predcl <- modelnn %>% predict(x_test) %>% k_argmax()
as.numeric(predcl[1:36])
as.numeric(predcl[1:36])
g_test[1:36]
which(as.numeric(predcl[1:500]) != g_test[1:500])
# visualize the digits
plotIt <- function(id=1) {
im <- mnist$test$x[id,,]
im <- t(apply(im, 2, rev))
image(1:28, 1:28,
im,
col=gray((0:255)/255),
xaxt='n',
main=paste("Image label: ",
g_test[id],
" Predicted: ",
as.numeric(predcl[id])))
}
plotIt(1)
plotIt(9)
plotIt(150)
plotIt(248)
plotIt(260)
?keras$metrics$
keras$metrics
?keras$metrics
?keras$metrics$
keras$metrics$
;
keras$activations
?keras$activations
keras$losses
?>keras$losses
??keras$losses
?keras$losses
?barplot
library(ISLR2)
data(College)
attach(College)
hist(Outstate[Private=="Yes"], col="powderblue")
hist(Outstate[Private=="No"], col="pink", add=TRUE)
barplot(Outstate[Private=="Yes"])
hist()
?hist
hist(Outstate[Private=="Yes"], col="powderblue")
hist(Outstate[Private=="No"], col="pink", add=TRUE)
par(mfrow=c(1,2))
hist(Outstate[Private=="Yes"], col="powderblue", main="Private")
hist(Outstate[Private=="No"] , col="pink"      , main="Public" )
par(mfrow=c(1,2))
hist(Outstate[Private=="Yes"],
col ="powderblue",
main="Private",
xlab="Out-of-state tuition",
xlim=c(min(Outstate),max(Outstate)))
hist(Outstate[Private=="No"] ,
col ="pink",
main="Public",
xlab="Out-of-state tuition",
xlim=c(min(Outstate),max(Outstate)))
par(mfrow=c(1,2))
hist(Outstate[Private=="Yes"],
col ="powderblue",
freq=FALSE,
main="Private",
xlab="Out-of-state tuition",
xlim=c(min(Outstate),max(Outstate)))
hist(Outstate[Private=="No"] ,
col ="pink",
freq=FALSE,
main="Public",
xlab="Out-of-state tuition",
xlim=c(min(Outstate),max(Outstate)))
par(mfrow=c(1,2))
hist(Grad.Rate[Private=="Yes"],
col ="powderblue",
main="Private",
xlab="Graduation rate",
xlim=c(min(Grad.Rate),max(Grad.Rate)))
hist(Grad.Rate[Private=="No"] ,
col ="pink",
main="Public",
xlab="Graduation rate",
xlim=c(min(Grad.Rate),max(Grad.Rate)))
hist(Outstate[Private=="Yes"], col="powderblue")
hist(Outstate[Private=="No"], col="pink", add=TRUE)
plot( Outstate[Private=="Yes"], col=rgb(0,0,1,1/4), )  # first histogram
plot( Outstate[Private=="No"],  col=rgb(1,0,0,1/4),  add=T)  # second
hist( Outstate[Private=="Yes"], col=rgb(0,0,1,1/4), )  # first histogram
hist( Outstate[Private=="No"],  col=rgb(1,0,0,1/4),  add=T)  # second
hist( Outstate[Private=="Yes"], col=rgb(1,0,1,1/4), )  # first histogram
hist( Outstate[Private=="No"],  col=rgb(0,0,1,1/4),  add=T)  # second
hist( Outstate[Private=="Yes"], col=rgb(1,0,1,1/4), )  # first histogram
?College
hist(Outstate[Private=="Yes"],
col ="powderblue",
xlab="Out-of-state tuition",
xlim=c(min(Outstate),max(Outstate)))
#| Histograms of out of state tuition for private and public universities in 1995.
library(ISLR2)
data(College)
hist(Outstate[Private=="Yes"],
col ="powderblue",
xlab="Out-of-state tuition",
xlim=c(min(Outstate),max(Outstate)))
hist(Outstate[Private=="Yes"],
col ="powderblue",
xlab="Out-of-state tuition",
main="",
xlim=c(min(Outstate),max(Outstate)))
par(mai=c(1,1,0.5,0.5))
hist(Outstate[Private=="Yes"],
col ="powderblue",
xlab="Out-of-state tuition",
main="",
xlim=c(min(Outstate),max(Outstate)))
par(mai=c(1,1,0.5,0.5))
hist(Outstate[Private=="Yes"],
breaks=30,
col ="powderblue",
xlab="Out-of-state tuition",
main="",
las=1,
xlim=c(min(Outstate),max(Outstate)))
par(mfrow=c(1,2))
hist(Outstate[Private=="Yes"],
col ="powderblue",
main="Private",
xlab="Out-of-state tuition",
xlim=c(min(Outstate),max(Outstate)))
hist(Outstate[Private=="No"] ,
col ="pink",
main="Public",
xlab="Out-of-state tuition",
xlim=c(min(Outstate),max(Outstate)))
par(mfrow=c(1,2))
hist(Outstate[Private=="Yes"],
col ="powderblue",
main="Private",
xlab="Out-of-state tuition",
ylim=c(0,140),
xlim=c(min(Outstate),max(Outstate)))
hist(Outstate[Private=="No"] ,
col ="pink",
main="Public",
xlab="Out-of-state tuition",
ylim=c(0,140),
xlim=c(min(Outstate),max(Outstate)))
par(mfrow=c(1,2),
mai=c(1,1,0.5,0.5))
hist(Outstate[Private=="Yes"],
col ="powderblue",
main="Private",
xlab="Out-of-state tuition",
las=1,
ylim=c(0,140),
xlim=c(min(Outstate),max(Outstate)))
hist(Outstate[Private=="No"] ,
col ="pink",
main="Public",
xlab="Out-of-state tuition",
las=1,
ylim=c(0,140),
xlim=c(min(Outstate),max(Outstate)))
par(mfrow=c(1,2),
mai=c(1,1,0.5,0.5))
hist(Outstate[Private=="Yes"],
col ="powderblue",
freq=FALSE,
main="Private",
xlab="Out-of-state tuition",
las=1,
ylim=c(0,140),
xlim=c(min(Outstate),max(Outstate)))
hist(Outstate[Private=="No"] ,
freq=FALSE,
col ="pink",
main="Public",
xlab="Out-of-state tuition",
las=1,
ylim=c(0,140),
xlim=c(min(Outstate),max(Outstate)))
par(mfrow=c(1,2),
mai=c(1,1,0.5,0.5))
hist(Outstate[Private=="Yes"],
col ="powderblue",
freq=FALSE,
main="Private",
xlab="Out-of-state tuition",
las=1,
xlim=c(min(Outstate),max(Outstate)))
hist(Outstate[Private=="No"] ,
freq=FALSE,
col ="pink",
main="Public",
xlab="Out-of-state tuition",
las=1,
xlim=c(min(Outstate),max(Outstate)))
par(mfrow=c(1,2),
mai=c(1,1,0.5,0.5))
hist(Outstate[Private=="Yes"],
col ="powderblue",
freq=FALSE,
main="Private",
xlab="Out-of-state tuition",
ylab="",
las=1,
xlim=c(min(Outstate),max(Outstate)))
hist(Outstate[Private=="No"] ,
freq=FALSE,
col ="pink",
main="Public",
xlab="Out-of-state tuition",
ylab="",
las=1,
xlim=c(min(Outstate),max(Outstate)))
hist( Outstate[Private=="Yes"], col=rgb(1,0,1,1/4), )  # first histogram
hist( Outstate[Private=="No"],  col=rgb(0,0,1,1/4),  add=T)  # second
hist( Outstate[Private=="Yes"], col=rgb(1,0,1,1/4), las=1,main="")
hist( Outstate[Private=="No"],  col=rgb(0,0,1,1/4),  add=TRUE)
hist( Outstate[Private=="Yes"], col=rgb(1,0,1,1/4), las=1,
xlab="Out of state tuition",main="")
hist( Outstate[Private=="No"],  col=rgb(0,0,1,1/4),  xlab="",add=TRUE)
?boxploy
?boxplot
hist( Outstate[Private=="Yes"],
col=rgb(1,0,1,1/4),
breaks=20,
las=1,
xlab="Out-of-state tuition",main="")
hist( Outstate[Private=="No"],
col=rgb(0,0,1,1/4),
breaks=20,
xlab="",add=TRUE)
par(mai=c(1,1,0.5,0.5))
hist( Outstate[Private=="Yes"],
col=rgb(1,0,1,1/4),
breaks=15,
las=1,
xlab="Out-of-state tuition",main="")
hist( Outstate[Private=="No"],
col=rgb(0,0,1,1/4),
breaks=15,
xlab="",add=TRUE)
set.seed(54)
x <- rnorm(200)
boxplot(x)
set.seed(254)
x <- rnorm(200)
boxplot(x)
set.seed(2524)
x <- rnorm(200)
boxplot(x)
set.seed(25234)
x <- rnorm(200)
boxplot(x)
set.seed(25234)
x <- rnorm(300)
boxplot(x)
#| Box plot of 300 observations from a $G(0,1)$ distribution
set.seed(2524)
x <- rnorm(300)
boxplot(x, las=1)
#| Box plot of 300 observations from a $G(0,1)$ distribution
set.seed(524)
x <- rnorm(300)
boxplot(x, las=1)
#| Box plot of 300 observations from a $G(0,1)$ distribution
set.seed(54)
x <- rnorm(300)
boxplot(x, las=1)
#| Box plot of 300 observations from a $G(0,1)$ distribution
set.seed(54)
x <- rnorm(300)
boxplot(x, las=1, bty="l")
#| Box plot of 300 observations from a $G(0,1)$ distribution
set.seed(549)
x <- rnorm(300)
boxplot(x, las=1, bty="l")
qnorm(0.75)
qnorm(0.25)
qnorm(0.75) - qnorm(0.25)
iqr <- qnorm(0.75) - qnorm(0.25)
qnorm + 1.5*iqr
qnorm(0.75) + 1.5*iqr
?qnorm
pnrom(qnorm(0.75))
pnorm(qnorm(0.75))
pnorm(qnorm(0.75) + 1.5iqr)
pnorm(qnorm(0.75) + 1.5*iqr)
pnorm(qnorm(0.25) - 1.5*iqr)
2*pnorm(qnorm(0.25) - 1.5*iqr)
2*pnorm(qnorm(0.25) - 1.5*iqr) * 1000
# Formula expression to get separate boxplots
boxplot(Grad.Rate ~ Private)
# All variables
boxplot(College)
str(College)
# All variables
boxplot(College[,3:6])
# All variables
varlist <- c(3,4,9,12)
boxplot(College[,varlist])
# All variables
varlist <- c(3,4,9,12,18)
boxplot(College[,varlist])
#| fig.cap: Comparing distributions of attributes with boxplots.
#| label: fig-boxplot-vars
boxplot(Grad.Rate ~ Private)
#| fig.cap: Comparing distributions of attributes with boxplots.
#| label: fig-boxplot-vars
boxplot(Grad.Rate ~ Private,las=1,xlab="Private University")
?boxplot
par(mai=c(1,1,0.5,0.5))
boxplot(Grad.Rate ~ Private,
las=1,
xlab="Private University",
ylab="Graduation Rate")
boxplot(Grad.Rate ~ Private,
las=1,
boxwex=0.5,
xlab="Private University",
ylab="Graduation Rate")
boxplot(Grad.Rate ~ Private,
las=1,
boxwex=1.5,
xlab="Private University",
ylab="Graduation Rate")
boxplot(Grad.Rate ~ Private,
las=1,
boxwex=0.5,
xlab="Private University",
ylab="Graduation Rate")
(5.70-4)
(5.70-4)/(3.1/sqrt(15))
?prt
?pt
pt(2.123,14)
2*(1-pt(2.123,14))
1 - 0.965
library(keras)
keras$layers$Layers
reticulate::use_condaenv(condaenv = "r-tensorflow")
library(keras)
reticulate::use_condaenv(condaenv = "r-tensorflow")
keras$losses
keras$layers
exp(0.3)/(1+exp(0.3))
1/(1+exp(-0.3))
1/(1+exp(-5))
1/(1+exp(-6))
10000/265
10000/365
2019 - 1854''
2019 - 1854
reticulate::py_last_error()
reticulate::repl_python()
